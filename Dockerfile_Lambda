# Base Dockerfile from: "https://docs.astral.sh/uv/guides/integration/aws-lambda/#deploying-a-docker-image"
# ---- Stage UV ----
FROM ghcr.io/astral-sh/uv:0.7.3 AS uv

# ---- Stage BUILDER ----
FROM public.ecr.aws/lambda/python:3.10 AS builder

# Enable bytecode compilation, to improve cold-start performance.
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata, to create a deterministic layer.
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching.
ENV UV_LINK_MODE=copy

# Bundle the dependencies into the Lambda task root via `uv pip install --target`.
#
# Omit any local packages (`--no-emit-workspace`) and development dependencies (`--no-dev`).
# This ensures that the Docker layer cache is only invalidated when the `pyproject.toml` or `uv.lock`
# files change, but remains robust to changes in the application code.
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt && \
    uv pip install -r requirements.txt --target "${LAMBDA_TASK_ROOT}"

# ---- Stage PRODUCTION ----
FROM public.ecr.aws/lambda/python:3.10 AS production
    
# Copy the runtime dependencies from the builder stage.
COPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}

# Use ARGs to pass environment variables at build time
ARG ENV_STREAM_URL
ARG ENV_REGION_NAME
ARG ENV_BUCKET_NAME
ENV ENV_STREAM_URL=$ENV_STREAM_URL
ENV ENV_REGION_NAME=$ENV_REGION_NAME
ENV ENV_BUCKET_NAME=$ENV_BUCKET_NAME

# Copy the application code.
COPY . ${LAMBDA_TASK_ROOT}

# Set the AWS Lambda handler.
CMD ["modules.webcam_retriever.lambda_handler"]
    